--- a/vscode/extensions/sample-tool-extension/package.json
+++ b/vscode/extensions/sample-tool-extension/package.json
@@ -16,6 +16,26 @@
         "languageModelTools"
     ],
     "contributes": {
+        "configuration": {
+            "title": "Chat Agent",
+            "properties": {
+                "chat.instructions.ask": {
+                    "type": "string",
+                    "default": "You are a general-purpose AI assistant. Your primary goal is to answer questions and provide information to the user.",
+                    "description": "The initial instructions for the agent in 'Ask' mode."
+                },
+                "chat.instructions.edit": {
+                    "type": "string",
+                    "default": "You are a code-editing AI assistant. Your primary goal is to help the user edit their code. You can suggest code changes, and the user can accept or reject them.",
+                    "description": "The initial instructions for the agent in 'Edit' mode."
+                },
+                "chat.instructions.agent": {
+                    "type": "string",
+                    "default": "You are a software development agent. Your primary goal is to help the user with their software development tasks. You can use tools to interact with the user's workspace, such as listing files, running tests, running the linter, and applying code changes.",
+                    "description": "The initial instructions for the agent in 'Agent' mode."
+                }
+            }
+        },
         "languageModelTools": [
             {
                 "name": "file.list",
--- a/vscode/src/vs/workbench/contrib/chat/common/chatModes.ts
+++ b/vscode/src/vs/workbench/contrib/chat/common/chatModes.ts
@@ -45,7 +45,8 @@
		@IChatAgentService private readonly chatAgentService: IChatAgentService,
		@IContextKeyService contextKeyService: IContextKeyService,
		@ILogService private readonly logService: ILogService,
-		@IStorageService private readonly storageService: IStorageService
+		@IStorageService private readonly storageService: IStorageService,
+		@IConfigurationService private readonly configurationService: IConfigurationService
	) {
		super();

@@ -66,6 +67,30 @@
				this._onDidChangeChatModes.fire();
			}
		}));
+
+		this._updateBuiltinModeInstructions();
+		this._register(this.configurationService.onDidChangeConfiguration(e => {
+			if (e.affectsConfiguration('chat.instructions.ask') || e.affectsConfiguration('chat.instructions.edit') || e.affectsConfiguration('chat.instructions.agent')) {
+				this._updateBuiltinModeInstructions();
+			}
+		}));
+	}
+
+	private _updateBuiltinModeInstructions(): void {
+		const askInstructions = this.configurationService.getValue<string>('chat.instructions.ask');
+		if (askInstructions) {
+			(ChatMode.Ask.body as ISettableObservable<string>).set(askInstructions, undefined);
+		}
+
+		const editInstructions = this.configurationService.getValue<string>('chat.instructions.edit');
+		if (editInstructions) {
+			(ChatMode.Edit.body as ISettableObservable<string>).set(editInstructions, undefined);
+		}
+
+		const agentInstructions = this.configurationService.getValue<string>('chat.instructions.agent');
+		if (agentInstructions) {
+			(ChatMode.Agent.body as ISettableObservable<string>).set(agentInstructions, undefined);
+		}
	}

	private loadCachedModes(): void {
@@ -306,13 +331,16 @@

 export class BuiltinChatMode implements IChatMode {
	public readonly description: IObservable<string>;
+	public readonly body: ISettableObservable<string>;

	constructor(
		public readonly kind: ChatModeKind,
		public readonly name: string,
-		description: string
+		description: string,
+		body: string
	) {
		this.description = observableValue('description', description);
+		this.body = observableValue('body', body);
	}

	get id(): string {
@@ -328,15 +356,16 @@
			id: this.id,
			name: this.name,
			description: this.description.get(),
-			kind: this.kind
+			kind: this.kind,
+			body: this.body.get()
		};
	}
 }

 export namespace ChatMode {
-	export const Ask = new BuiltinChatMode(ChatModeKind.Ask, 'Ask', localize('chatDescription', "Ask Copilot"));
-	export const Edit = new BuiltinChatMode(ChatModeKind.Edit, 'Edit', localize('editsDescription', "Edit files in your workspace"));
-	export const Agent = new BuiltinChatMode(ChatModeKind.Agent, 'Agent', localize('agentDescription', "Edit files in your workspace in agent mode"));
+	export const Ask = new BuiltinChatMode(ChatModeKind.Ask, 'Ask', localize('chatDescription', "Ask Copilot"), 'You are a general-purpose AI assistant. Your primary goal is to answer questions and provide information to the user.');
+	export const Edit = new BuiltinChatMode(ChatModeKind.Edit, 'Edit', localize('editsDescription', "Edit files in your workspace"), 'You are a code-editing AI assistant. Your primary goal is to help the user edit their code. You can suggest code changes, and the user can accept or reject them.');
+	export const Agent = new BuiltinChatMode(ChatModeKind.Agent, 'Agent', localize('agentDescription', "Edit files in your workspace in agent mode"), 'You are a software development agent. Your primary goal is to help the user with their software development tasks. You can use tools to interact with the user\'s workspace, such as listing files, running tests, running the linter, and applying code changes.');
 }

 export function isBuiltinChatMode(mode: IChatMode): boolean {
